/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-05-05 20:00:12 UTC)
 * on 2015-05-07 at 22:27:28 UTC 
 * Modify at your own risk.
 */

package com.appspot.ocr_backend.backend;

/**
 * Service definition for Backend (v1).
 * <p/>
 * <p>
 * OCR Backend Services
 * </p>
 * <p/>
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 * <p/>
 * <p>
 * This service uses {@link BackendRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @author Google, Inc.
 * @since 1.3
 */
@SuppressWarnings("javadoc")
public class Backend extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

    // Note: Leave this static initializer at the top of the file.
    static {
        com.google.api.client.util.Preconditions.checkState(
                com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
                        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
                "You are currently running with version %s of google-api-client. " +
                        "You need at least version 1.15 of google-api-client to run version " +
                        "1.20.0 of the backend library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
    }

    /**
     * The default encoded root URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_ROOT_URL = "https://ocr-backend.appspot.com/_ah/api/";

    /**
     * The default encoded service path of the service. This is determined when the library is
     * generated and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_SERVICE_PATH = "backend/v1/";

    /**
     * The default encoded base URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     */
    public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

    /**
     * Constructor.
     * <p/>
     * <p>
     * Use {@link Builder} if you need to specify any of the optional parameters.
     * </p>
     *
     * @param transport              HTTP transport, which should normally be:
     *                               <ul>
     *                               <li>Google App Engine:
     *                               {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *                               <li>Android: {@code newCompatibleTransport} from
     *                               {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *                               <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *                               </li>
     *                               </ul>
     * @param jsonFactory            JSON factory, which may be:
     *                               <ul>
     *                               <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *                               <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *                               <li>Android Honeycomb or higher:
     *                               {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *                               </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Backend(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                   com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
        this(new Builder(transport, jsonFactory, httpRequestInitializer));
    }

    /**
     * @param builder builder
     */
    Backend(Builder builder) {
        super(builder);
    }

    @Override
    protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
        super.initialize(httpClientRequest);
    }

    /**
     * An accessor for creating requests from the Bill collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Bill.List request = backend.bill().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Bill bill() {
        return new Bill();
    }

    /**
     * The "bill" collection of methods.
     */
    public class Bill {

        /**
         * Gets all bills that match the criteria.
         * <p/>
         * Create a request for the method "bill.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetBills}
         * @return the request
         */
        public Get get(com.appspot.ocr_backend.backend.model.MessagesGetBills content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetBillsResponse> {

            private static final String REST_PATH = "bill/get";

            /**
             * Gets all bills that match the criteria.
             * <p/>
             * Create a request for the method "bill.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetBills}
             * @since 1.13
             */
            protected Get(com.appspot.ocr_backend.backend.model.MessagesGetBills content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetBillsResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

        /**
         * Generates a new bill in the platform
         * <p/>
         * Create a request for the method "bill.new".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link BackendNew#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewBill}
         * @return the request
         */
        public BackendNew backendNew(com.appspot.ocr_backend.backend.model.MessagesNewBill content) throws java.io.IOException {
            BackendNew result = new BackendNew(content);
            initialize(result);
            return result;
        }

        public class BackendNew extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesNewBillResponse> {

            private static final String REST_PATH = "bill/new";

            /**
             * Generates a new bill in the platform
             * <p/>
             * Create a request for the method "bill.new".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link BackendNew#execute()} method to invoke the remote operation. <p>
             * {@link
             * BackendNew#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewBill}
             * @since 1.13
             */
            protected BackendNew(com.appspot.ocr_backend.backend.model.MessagesNewBill content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesNewBillResponse.class);
            }

            @Override
            public BackendNew setAlt(java.lang.String alt) {
                return (BackendNew) super.setAlt(alt);
            }

            @Override
            public BackendNew setFields(java.lang.String fields) {
                return (BackendNew) super.setFields(fields);
            }

            @Override
            public BackendNew setKey(java.lang.String key) {
                return (BackendNew) super.setKey(key);
            }

            @Override
            public BackendNew setOauthToken(java.lang.String oauthToken) {
                return (BackendNew) super.setOauthToken(oauthToken);
            }

            @Override
            public BackendNew setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (BackendNew) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public BackendNew setQuotaUser(java.lang.String quotaUser) {
                return (BackendNew) super.setQuotaUser(quotaUser);
            }

            @Override
            public BackendNew setUserIp(java.lang.String userIp) {
                return (BackendNew) super.setUserIp(userIp);
            }

            @Override
            public BackendNew set(String parameterName, Object value) {
                return (BackendNew) super.set(parameterName, value);
            }
        }

        /**
         * Marks a bill as payed in the platform
         * <p/>
         * Create a request for the method "bill.pay".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Pay#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesPayBill}
         * @return the request
         */
        public Pay pay(com.appspot.ocr_backend.backend.model.MessagesPayBill content) throws java.io.IOException {
            Pay result = new Pay(content);
            initialize(result);
            return result;
        }

        public class Pay extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesPayBillResponse> {

            private static final String REST_PATH = "bill/pay";

            /**
             * Marks a bill as payed in the platform
             * <p/>
             * Create a request for the method "bill.pay".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Pay#execute()} method to invoke the remote operation. <p> {@link
             * Pay#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesPayBill}
             * @since 1.13
             */
            protected Pay(com.appspot.ocr_backend.backend.model.MessagesPayBill content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesPayBillResponse.class);
            }

            @Override
            public Pay setAlt(java.lang.String alt) {
                return (Pay) super.setAlt(alt);
            }

            @Override
            public Pay setFields(java.lang.String fields) {
                return (Pay) super.setFields(fields);
            }

            @Override
            public Pay setKey(java.lang.String key) {
                return (Pay) super.setKey(key);
            }

            @Override
            public Pay setOauthToken(java.lang.String oauthToken) {
                return (Pay) super.setOauthToken(oauthToken);
            }

            @Override
            public Pay setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Pay) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Pay setQuotaUser(java.lang.String quotaUser) {
                return (Pay) super.setQuotaUser(quotaUser);
            }

            @Override
            public Pay setUserIp(java.lang.String userIp) {
                return (Pay) super.setUserIp(userIp);
            }

            @Override
            public Pay set(String parameterName, Object value) {
                return (Pay) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Meter collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Meter.List request = backend.meter().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Meter meter() {
        return new Meter();
    }

    /**
     * The "meter" collection of methods.
     */
    public class Meter {

        /**
         * Assigns a meter to a user (email)
         * <p/>
         * Create a request for the method "meter.assign_to_user".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link AssignToUser#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUser}
         * @return the request
         */
        public AssignToUser assignToUser(com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUser content) throws java.io.IOException {
            AssignToUser result = new AssignToUser(content);
            initialize(result);
            return result;
        }

        public class AssignToUser extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUserResponse> {

            private static final String REST_PATH = "meter/assign_to_user";

            /**
             * Assigns a meter to a user (email)
             * <p/>
             * Create a request for the method "meter.assign_to_user".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link AssignToUser#execute()} method to invoke the remote operation. <p>
             * {@link
             * AssignToUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUser}
             * @since 1.13
             */
            protected AssignToUser(com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUser content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesAssignMeterToUserResponse.class);
            }

            @Override
            public AssignToUser setAlt(java.lang.String alt) {
                return (AssignToUser) super.setAlt(alt);
            }

            @Override
            public AssignToUser setFields(java.lang.String fields) {
                return (AssignToUser) super.setFields(fields);
            }

            @Override
            public AssignToUser setKey(java.lang.String key) {
                return (AssignToUser) super.setKey(key);
            }

            @Override
            public AssignToUser setOauthToken(java.lang.String oauthToken) {
                return (AssignToUser) super.setOauthToken(oauthToken);
            }

            @Override
            public AssignToUser setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (AssignToUser) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public AssignToUser setQuotaUser(java.lang.String quotaUser) {
                return (AssignToUser) super.setQuotaUser(quotaUser);
            }

            @Override
            public AssignToUser setUserIp(java.lang.String userIp) {
                return (AssignToUser) super.setUserIp(userIp);
            }

            @Override
            public AssignToUser set(String parameterName, Object value) {
                return (AssignToUser) super.set(parameterName, value);
            }
        }

        /**
         * Generates a new meter in the platform, if the account number is already in use returns an error
         * <p/>
         * Create a request for the method "meter.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesCreateMeter}
         * @return the request
         */
        public Create create(com.appspot.ocr_backend.backend.model.MessagesCreateMeter content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesCreateMeterResponse> {

            private static final String REST_PATH = "meter/create";

            /**
             * Generates a new meter in the platform, if the account number is already in use returns an error
             * <p/>
             * Create a request for the method "meter.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesCreateMeter}
             * @since 1.13
             */
            protected Create(com.appspot.ocr_backend.backend.model.MessagesCreateMeter content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesCreateMeterResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Gets a meter information based on it's account_number
         * <p/>
         * Create a request for the method "meter.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetMeter}
         * @return the request
         */
        public Get get(com.appspot.ocr_backend.backend.model.MessagesGetMeter content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetMeterResponse> {

            private static final String REST_PATH = "meter/get";

            /**
             * Gets a meter information based on it's account_number
             * <p/>
             * Create a request for the method "meter.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetMeter}
             * @since 1.13
             */
            protected Get(com.appspot.ocr_backend.backend.model.MessagesGetMeter content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetMeterResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

        /**
         * Gets all meters assigned to a user
         * <p/>
         * Create a request for the method "meter.get_all_assigned_to_user".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetAllAssignedToUser#execute()} method to invoke the remote
         * operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetMeters}
         * @return the request
         */
        public GetAllAssignedToUser getAllAssignedToUser(com.appspot.ocr_backend.backend.model.MessagesGetMeters content) throws java.io.IOException {
            GetAllAssignedToUser result = new GetAllAssignedToUser(content);
            initialize(result);
            return result;
        }

        public class GetAllAssignedToUser extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetMetersResponse> {

            private static final String REST_PATH = "meter/get_all_assigned_to_user";

            /**
             * Gets all meters assigned to a user
             * <p/>
             * Create a request for the method "meter.get_all_assigned_to_user".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetAllAssignedToUser#execute()} method to invoke the remote
             * operation. <p> {@link GetAllAssignedToUser#initialize(com.google.api.client.googleapis.services
             * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetMeters}
             * @since 1.13
             */
            protected GetAllAssignedToUser(com.appspot.ocr_backend.backend.model.MessagesGetMeters content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetMetersResponse.class);
            }

            @Override
            public GetAllAssignedToUser setAlt(java.lang.String alt) {
                return (GetAllAssignedToUser) super.setAlt(alt);
            }

            @Override
            public GetAllAssignedToUser setFields(java.lang.String fields) {
                return (GetAllAssignedToUser) super.setFields(fields);
            }

            @Override
            public GetAllAssignedToUser setKey(java.lang.String key) {
                return (GetAllAssignedToUser) super.setKey(key);
            }

            @Override
            public GetAllAssignedToUser setOauthToken(java.lang.String oauthToken) {
                return (GetAllAssignedToUser) super.setOauthToken(oauthToken);
            }

            @Override
            public GetAllAssignedToUser setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetAllAssignedToUser) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetAllAssignedToUser setQuotaUser(java.lang.String quotaUser) {
                return (GetAllAssignedToUser) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetAllAssignedToUser setUserIp(java.lang.String userIp) {
                return (GetAllAssignedToUser) super.setUserIp(userIp);
            }

            @Override
            public GetAllAssignedToUser set(String parameterName, Object value) {
                return (GetAllAssignedToUser) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Prepay collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Prepay.List request = backend.prepay().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Prepay prepay() {
        return new Prepay();
    }

    /**
     * The "prepay" collection of methods.
     */
    public class Prepay {

        /**
         * Gets the factor of a prepay taking into account the amount of m3 to prepay
         * <p/>
         * Create a request for the method "prepay.factor".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Factor#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactor}
         * @return the request
         */
        public Factor factor(com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactor content) throws java.io.IOException {
            Factor result = new Factor(content);
            initialize(result);
            return result;
        }

        public class Factor extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactorResponse> {

            private static final String REST_PATH = "prepay/factor";

            /**
             * Gets the factor of a prepay taking into account the amount of m3 to prepay
             * <p/>
             * Create a request for the method "prepay.factor".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Factor#execute()} method to invoke the remote operation. <p> {@link
             * Factor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactor}
             * @since 1.13
             */
            protected Factor(com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactor content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetPrepayFactorResponse.class);
            }

            @Override
            public Factor setAlt(java.lang.String alt) {
                return (Factor) super.setAlt(alt);
            }

            @Override
            public Factor setFields(java.lang.String fields) {
                return (Factor) super.setFields(fields);
            }

            @Override
            public Factor setKey(java.lang.String key) {
                return (Factor) super.setKey(key);
            }

            @Override
            public Factor setOauthToken(java.lang.String oauthToken) {
                return (Factor) super.setOauthToken(oauthToken);
            }

            @Override
            public Factor setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Factor) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Factor setQuotaUser(java.lang.String quotaUser) {
                return (Factor) super.setQuotaUser(quotaUser);
            }

            @Override
            public Factor setUserIp(java.lang.String userIp) {
                return (Factor) super.setUserIp(userIp);
            }

            @Override
            public Factor set(String parameterName, Object value) {
                return (Factor) super.set(parameterName, value);
            }
        }

        /**
         * Gets all prepays events
         * <p/>
         * Create a request for the method "prepay.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetPrepays}
         * @return the request
         */
        public Get get(com.appspot.ocr_backend.backend.model.MessagesGetPrepays content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetPrepaysResponse> {

            private static final String REST_PATH = "prepay/get";

            /**
             * Gets all prepays events
             * <p/>
             * Create a request for the method "prepay.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetPrepays}
             * @since 1.13
             */
            protected Get(com.appspot.ocr_backend.backend.model.MessagesGetPrepays content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetPrepaysResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

        /**
         * Generates a new prepay event in the platform
         * <p/>
         * Create a request for the method "prepay.new".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link BackendNew#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewPrepay}
         * @return the request
         */
        public BackendNew backendNew(com.appspot.ocr_backend.backend.model.MessagesNewPrepay content) throws java.io.IOException {
            BackendNew result = new BackendNew(content);
            initialize(result);
            return result;
        }

        public class BackendNew extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesNewPrepayResponse> {

            private static final String REST_PATH = "prepay/new";

            /**
             * Generates a new prepay event in the platform
             * <p/>
             * Create a request for the method "prepay.new".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link BackendNew#execute()} method to invoke the remote operation. <p>
             * {@link
             * BackendNew#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewPrepay}
             * @since 1.13
             */
            protected BackendNew(com.appspot.ocr_backend.backend.model.MessagesNewPrepay content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesNewPrepayResponse.class);
            }

            @Override
            public BackendNew setAlt(java.lang.String alt) {
                return (BackendNew) super.setAlt(alt);
            }

            @Override
            public BackendNew setFields(java.lang.String fields) {
                return (BackendNew) super.setFields(fields);
            }

            @Override
            public BackendNew setKey(java.lang.String key) {
                return (BackendNew) super.setKey(key);
            }

            @Override
            public BackendNew setOauthToken(java.lang.String oauthToken) {
                return (BackendNew) super.setOauthToken(oauthToken);
            }

            @Override
            public BackendNew setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (BackendNew) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public BackendNew setQuotaUser(java.lang.String quotaUser) {
                return (BackendNew) super.setQuotaUser(quotaUser);
            }

            @Override
            public BackendNew setUserIp(java.lang.String userIp) {
                return (BackendNew) super.setUserIp(userIp);
            }

            @Override
            public BackendNew set(String parameterName, Object value) {
                return (BackendNew) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Reading collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Reading.List request = backend.reading().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Reading reading() {
        return new Reading();
    }

    /**
     * The "reading" collection of methods.
     */
    public class Reading {

        /**
         * Gets all readings that match the criteria.
         * <p/>
         * Create a request for the method "reading.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetReadings}
         * @return the request
         */
        public Get get(com.appspot.ocr_backend.backend.model.MessagesGetReadings content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetReadingsResponse> {

            private static final String REST_PATH = "reading/get";

            /**
             * Gets all readings that match the criteria.
             * <p/>
             * Create a request for the method "reading.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetReadings}
             * @since 1.13
             */
            protected Get(com.appspot.ocr_backend.backend.model.MessagesGetReadings content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetReadingsResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

        /**
         * Generates a new task to process the new image received in the platform
         * <p/>
         * Create a request for the method "reading.new_image_for_processing".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link NewImageForProcessing#execute()} method to invoke the remote
         * operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessing}
         * @return the request
         */
        public NewImageForProcessing newImageForProcessing(com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessing content) throws java.io.IOException {
            NewImageForProcessing result = new NewImageForProcessing(content);
            initialize(result);
            return result;
        }

        public class NewImageForProcessing extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessingResponse> {

            private static final String REST_PATH = "reading/new_image_for_processing";

            /**
             * Generates a new task to process the new image received in the platform
             * <p/>
             * Create a request for the method "reading.new_image_for_processing".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link NewImageForProcessing#execute()} method to invoke the remote
             * operation. <p> {@link NewImageForProcessing#initialize(com.google.api.client.googleapis.service
             * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessing}
             * @since 1.13
             */
            protected NewImageForProcessing(com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessing content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesNewImageForProcessingResponse.class);
            }

            @Override
            public NewImageForProcessing setAlt(java.lang.String alt) {
                return (NewImageForProcessing) super.setAlt(alt);
            }

            @Override
            public NewImageForProcessing setFields(java.lang.String fields) {
                return (NewImageForProcessing) super.setFields(fields);
            }

            @Override
            public NewImageForProcessing setKey(java.lang.String key) {
                return (NewImageForProcessing) super.setKey(key);
            }

            @Override
            public NewImageForProcessing setOauthToken(java.lang.String oauthToken) {
                return (NewImageForProcessing) super.setOauthToken(oauthToken);
            }

            @Override
            public NewImageForProcessing setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (NewImageForProcessing) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public NewImageForProcessing setQuotaUser(java.lang.String quotaUser) {
                return (NewImageForProcessing) super.setQuotaUser(quotaUser);
            }

            @Override
            public NewImageForProcessing setUserIp(java.lang.String userIp) {
                return (NewImageForProcessing) super.setUserIp(userIp);
            }

            @Override
            public NewImageForProcessing set(String parameterName, Object value) {
                return (NewImageForProcessing) super.set(parameterName, value);
            }
        }

        /**
         * Set the result of an image processing task request.task_name: Process--[image]
         * request.task_payload: [meter]--[image]
         * <p/>
         * Create a request for the method "reading.set_image_processing_result".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link SetImageProcessingResult#execute()} method to invoke the remote
         * operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesImageProcessingResult}
         * @return the request
         */
        public SetImageProcessingResult setImageProcessingResult(com.appspot.ocr_backend.backend.model.MessagesImageProcessingResult content) throws java.io.IOException {
            SetImageProcessingResult result = new SetImageProcessingResult(content);
            initialize(result);
            return result;
        }

        public class SetImageProcessingResult extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesImageProcessingResultResponse> {

            private static final String REST_PATH = "reading/set_image_processing_result";

            /**
             * Set the result of an image processing task request.task_name: Process--[image]
             * request.task_payload: [meter]--[image]
             * <p/>
             * Create a request for the method "reading.set_image_processing_result".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link SetImageProcessingResult#execute()} method to invoke the remote
             * operation. <p> {@link SetImageProcessingResult#initialize(com.google.api.client.googleapis.serv
             * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesImageProcessingResult}
             * @since 1.13
             */
            protected SetImageProcessingResult(com.appspot.ocr_backend.backend.model.MessagesImageProcessingResult content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesImageProcessingResultResponse.class);
            }

            @Override
            public SetImageProcessingResult setAlt(java.lang.String alt) {
                return (SetImageProcessingResult) super.setAlt(alt);
            }

            @Override
            public SetImageProcessingResult setFields(java.lang.String fields) {
                return (SetImageProcessingResult) super.setFields(fields);
            }

            @Override
            public SetImageProcessingResult setKey(java.lang.String key) {
                return (SetImageProcessingResult) super.setKey(key);
            }

            @Override
            public SetImageProcessingResult setOauthToken(java.lang.String oauthToken) {
                return (SetImageProcessingResult) super.setOauthToken(oauthToken);
            }

            @Override
            public SetImageProcessingResult setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (SetImageProcessingResult) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public SetImageProcessingResult setQuotaUser(java.lang.String quotaUser) {
                return (SetImageProcessingResult) super.setQuotaUser(quotaUser);
            }

            @Override
            public SetImageProcessingResult setUserIp(java.lang.String userIp) {
                return (SetImageProcessingResult) super.setUserIp(userIp);
            }

            @Override
            public SetImageProcessingResult set(String parameterName, Object value) {
                return (SetImageProcessingResult) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the User collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.User.List request = backend.user().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public User user() {
        return new User();
    }

    /**
     * The "user" collection of methods.
     */
    public class User {

        /**
         * Generates a new user in the platform, if the email is already in use returns an error
         * <p/>
         * Create a request for the method "user.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesCreateUser}
         * @return the request
         */
        public Create create(com.appspot.ocr_backend.backend.model.MessagesCreateUser content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesCreateUserResponse> {

            private static final String REST_PATH = "user/create";

            /**
             * Generates a new user in the platform, if the email is already in use returns an error
             * <p/>
             * Create a request for the method "user.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesCreateUser}
             * @since 1.13
             */
            protected Create(com.appspot.ocr_backend.backend.model.MessagesCreateUser content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesCreateUserResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Gets a user information based on it's email address
         * <p/>
         * Create a request for the method "user.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetUser}
         * @return the request
         */
        public Get get(com.appspot.ocr_backend.backend.model.MessagesGetUser content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.ocr_backend.backend.model.MessagesGetUserResponse> {

            private static final String REST_PATH = "user/get";

            /**
             * Gets a user information based on it's email address
             * <p/>
             * Create a request for the method "user.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.ocr_backend.backend.model.MessagesGetUser}
             * @since 1.13
             */
            protected Get(com.appspot.ocr_backend.backend.model.MessagesGetUser content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.ocr_backend.backend.model.MessagesGetUserResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

    }

    /**
     * Builder for {@link Backend}.
     * <p/>
     * <p>
     * Implementation is not thread-safe.
     * </p>
     *
     * @since 1.3.0
     */
    public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

        /**
         * Returns an instance of a new builder.
         *
         * @param transport              HTTP transport, which should normally be:
         *                               <ul>
         *                               <li>Google App Engine:
         *                               {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
         *                               <li>Android: {@code newCompatibleTransport} from
         *                               {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
         *                               <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
         *                               </li>
         *                               </ul>
         * @param jsonFactory            JSON factory, which may be:
         *                               <ul>
         *                               <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
         *                               <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
         *                               <li>Android Honeycomb or higher:
         *                               {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
         *                               </ul>
         * @param httpRequestInitializer HTTP request initializer or {@code null} for none
         * @since 1.7
         */
        public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                       com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            super(
                    transport,
                    jsonFactory,
                    DEFAULT_ROOT_URL,
                    DEFAULT_SERVICE_PATH,
                    httpRequestInitializer,
                    false);
        }

        /**
         * Builds a new instance of {@link Backend}.
         */
        @Override
        public Backend build() {
            return new Backend(this);
        }

        @Override
        public Builder setRootUrl(String rootUrl) {
            return (Builder) super.setRootUrl(rootUrl);
        }

        @Override
        public Builder setServicePath(String servicePath) {
            return (Builder) super.setServicePath(servicePath);
        }

        @Override
        public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
        }

        @Override
        public Builder setApplicationName(String applicationName) {
            return (Builder) super.setApplicationName(applicationName);
        }

        @Override
        public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
            return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
        }

        @Override
        public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
            return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
        }

        @Override
        public Builder setSuppressAllChecks(boolean suppressAllChecks) {
            return (Builder) super.setSuppressAllChecks(suppressAllChecks);
        }

        /**
         * Set the {@link BackendRequestInitializer}.
         *
         * @since 1.12
         */
        public Builder setBackendRequestInitializer(
                BackendRequestInitializer backendRequestInitializer) {
            return (Builder) super.setGoogleClientRequestInitializer(backendRequestInitializer);
        }

        @Override
        public Builder setGoogleClientRequestInitializer(
                com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
            return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
        }
    }
}
